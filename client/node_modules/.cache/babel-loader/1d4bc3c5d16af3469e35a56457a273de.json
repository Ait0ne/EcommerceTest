{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyC-xpkeHxieWBmixd54w2byxU7mLm8e9XA\",\n  authDomain: \"testshop-f2c23.firebaseapp.com\",\n  databaseURL: \"https://testshop-f2c23.firebaseio.com\",\n  projectId: \"testshop-f2c23\",\n  storageBucket: \"testshop-f2c23.appspot.com\",\n  messagingSenderId: \"721914375858\",\n  appId: \"1:721914375858:web:45e8d5a901641efb3763ab\",\n  measurementId: \"G-YN5HF3FTL2\"\n};\nexport const createUserProfileDocument = async (userAuth, data) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...data\n      });\n    } catch (err) {\n      console.log('error creating user', err.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/bonaf/Desktop/Projects/Ecommerce/TestShop/testshop/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","data","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionSnapshotToMap","collections","transformedCollection","docs","map","title","items","routeName","encodeURI","toLowerCase","id","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyC-xpkeHxieWBmixd54w2byxU7mLm8e9XA\",\r\n    authDomain: \"testshop-f2c23.firebaseapp.com\",\r\n    databaseURL: \"https://testshop-f2c23.firebaseio.com\",\r\n    projectId: \"testshop-f2c23\",\r\n    storageBucket: \"testshop-f2c23.appspot.com\",\r\n    messagingSenderId: \"721914375858\",\r\n    appId: \"1:721914375858:web:45e8d5a901641efb3763ab\",\r\n    measurementId: \"G-YN5HF3FTL2\"\r\n  };\r\n\r\n  export const createUserProfileDocument = async (userAuth, data) =>{\r\n    if (!userAuth) return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const snapShot = await userRef.get();\r\n\r\n    if (!snapShot.exists) {\r\n      const {displayName,email} = userAuth;\r\n      const createdAt = new Date();\r\n      try{\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          createdAt,\r\n          ...data,\r\n        })\r\n      } catch (err) {\r\n        console.log('error creating user', err.message)\r\n      }\r\n    }\r\n    return userRef;\r\n  }\r\n\r\n  firebase.initializeApp(config);\r\n\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach(obj => {\r\n    const newDocRef = collectionRef.doc();\r\n    batch.set(newDocRef, obj);\r\n  });\r\n  return await batch.commit()\r\n}\r\n\r\n\r\nexport const convertCollectionSnapshotToMap  = (collections) => {\r\n  const transformedCollection = collections.docs.map(doc => {\r\n    const { title , items }  = doc.data();\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items\r\n    }\r\n  })\r\n  console.log(transformedCollection)\r\n}\r\n\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n  provider.setCustomParameters({prompt: 'select_account'});\r\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\n  export default firebase;\r\n"]},"metadata":{},"sourceType":"module"}